{"mappings":"oeAAAA,EAAA,SAAAC,SAA8CC,KAAKC,MAAM,wbCKzD,IAAAC,EAAAJ,EAAA,S,aASA,GAAIK,EAAAC,sBAQF,MAJAD,EAAAE,wBAIM,IAAIC,MAAM,uBAMF,IAAIH,EAAAI,eAApB,MAGMC,EAAW,IAAIN,EAAAO,cAAoB,CAAEC,WAAW,EAAMC,uBAAuB,IAC7EC,EAAQ,IAAIV,EAAAW,MAClBC,SAASC,KAAKC,YAAYR,EAASS,YAGnCT,EAASU,QAAQC,OAAOC,WAAYD,OAAOE,aAC3CF,OAAOG,iBAAiB,UAAU,KAChCd,EAASU,QAAQC,OAAOC,WAAYD,OAAOE,YAAY,IAIzD,MAAME,EAAS,IAAIpB,EAAAqB,OAInBrB,EAAAsB,sBAAkCC,MAAMC,IAGlCA,EAASJ,EAAOK,OAAM,GACrBzB,EAAA0B,oBAAgC,IAIvC1B,EAAA2B,aAAyBtB,EAASuB,cAIlCnB,EAAMoB,WAAaT,EAAOU,kBAI1B,SAASC,IAEPX,EAAOY,YAAY3B,GAMnBA,EAAS4B,OAAOxB,EAAOW,GAGvBc,sBAAsBH,E,CAIxBA","sources":["node_modules/@parcel/runtime-js/lib/runtime-ff99ecab31bd18c3.js","src/initial.ts"],"sourcesContent":["require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"evwqr\\\":\\\"index.d7c209d2.js\\\",\\\"1YdiR\\\":\\\"worker.7eb94a02.js\\\",\\\"e0xw1\\\":\\\"zappar-cv.315eebda.wasm\\\",\\\"eYcMP\\\":\\\"face_mesh_face_model.9f3b859a.zbin\\\",\\\"e6ghN\\\":\\\"face_mesh_full_head_simplified_model.caf9de0a.zbin\\\",\\\"ih7P4\\\":\\\"face_tracking_model.624095d1.zbin\\\",\\\"hp2O3\\\":\\\"index.3e9ba42a.css\\\",\\\"6GlBA\\\":\\\"index.c7c7a8b8.js\\\"}\"));","/// Zappar for ThreeJS Examples\n/// Face Tracking 3D Model\n\n// In this example we track a 3D model to the user's face\n\nimport * as THREE from 'three';\nimport * as ZapparThree from '@zappar/zappar-threejs';\n\nimport './index.css';\n\n// The SDK is supported on many different browsers, but there are some that\n// don't provide camera access. This function detects if the browser is supported\n// For more information on support, check out the readme over at\n// https://www.npmjs.com/package/@zappar/zappar-threejs\nif (ZapparThree.browserIncompatible()) {\n  // The browserIncompatibleUI() function shows a full-page dialog that informs the user\n  // they're using an unsupported browser, and provides a button to 'copy' the current page\n  // URL so they can 'paste' it into the address bar of a compatible alternative.\n  ZapparThree.browserIncompatibleUI();\n\n  // If the browser is not compatible, we can avoid setting up the rest of the page\n  // so we throw an exception here.\n  throw new Error('Unsupported browser');\n}\n\n// ZapparThree provides a LoadingManager that shows a progress bar while\n// the assets are downloaded. You can use this if it's helpful, or use\n// your own loading UI - it's up to you :-)\nconst manager = new ZapparThree.LoadingManager();\n\n// Construct our ThreeJS renderer (using preserveDrawingBuffer for the snapshot) and scene as usual\nconst renderer = new THREE.WebGLRenderer({ antialias: true, preserveDrawingBuffer: true });\nconst scene = new THREE.Scene();\ndocument.body.appendChild(renderer.domElement);\n\n// As with a normal ThreeJS scene, resize the canvas if the window resizes\nrenderer.setSize(window.innerWidth, window.innerHeight);\nwindow.addEventListener('resize', () => {\n  renderer.setSize(window.innerWidth, window.innerHeight);\n});\n\n// Create a Zappar camera that we'll use instead of a ThreeJS camera\nconst camera = new ZapparThree.Camera();\n\n// In order to use camera and motion data, we need to ask the users for permission\n// The Zappar library comes with some UI to help with that, so let's use it\nZapparThree.permissionRequestUI().then((granted) => {\n  // If the user granted us the permissions we need then we can start the camera\n  // Otherwise let's them know that it's necessary with Zappar's permission denied UI\n  if (granted) camera.start(true); // true parameter for user facing camera\n  else ZapparThree.permissionDeniedUI();\n});\n\n// The Zappar component needs to know our WebGL context, so set it like this:\nZapparThree.glContextSet(renderer.getContext());\n\n// Set the background of our scene to be the camera background texture\n// that's provided by the Zappar camera\nscene.background = camera.backgroundTexture;\n\n\n// Use a function to render our scene as usual\nfunction render(): void {\n  // The Zappar camera must have updateFrame called every frame\n  camera.updateFrame(renderer);\n\n  // Update the head mask so it fits the user's head in this frame\n//   mask.updateFromFaceAnchorGroup(faceTrackerGroup);\n\n  // Draw the ThreeJS scene in the usual way, but using the Zappar camera\n  renderer.render(scene, camera);\n\n  // Call render() again next frame\n  requestAnimationFrame(render);\n}\n\n// Start things off\nrender();\n"],"names":["parcelRequire","register","JSON","parse","$ilwiq","$2dyhB","browserIncompatible","browserIncompatibleUI","Error","LoadingManager","$1d5542d59475d61f$var$renderer","WebGLRenderer","antialias","preserveDrawingBuffer","$1d5542d59475d61f$var$scene","Scene","document","body","appendChild","domElement","setSize","window","innerWidth","innerHeight","addEventListener","$1d5542d59475d61f$var$camera","Camera","permissionRequestUI","then","granted","start","permissionDeniedUI","glContextSet","getContext","background","backgroundTexture","$1d5542d59475d61f$var$render","updateFrame","render","requestAnimationFrame"],"version":3,"file":"index.d7c209d2.js.map"}