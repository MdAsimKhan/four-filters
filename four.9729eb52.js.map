{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-6eee8cfa5ecaa9af.js","src/four.ts","node_modules/@parcel/runtime-js/lib/runtime-b3ecdf9339d0ac39.js"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"juhji\\\":\\\"four.9729eb52.js\\\",\\\"1YdiR\\\":\\\"worker.7eb94a02.js\\\",\\\"e0xw1\\\":\\\"zappar-cv.315eebda.wasm\\\",\\\"eYcMP\\\":\\\"face_mesh_face_model.9f3b859a.zbin\\\",\\\"e6ghN\\\":\\\"face_mesh_full_head_simplified_model.caf9de0a.zbin\\\",\\\"ih7P4\\\":\\\"face_tracking_model.624095d1.zbin\\\",\\\"9gvkQ\\\":\\\"videorecorder.fd59f5ae.wasm\\\",\\\"b1Asn\\\":\\\"recorder-worker.e7190aa3.js\\\",\\\"ljGNR\\\":\\\"astronaut_helmet.1cd5bc3c.glb\\\",\\\"hp2O3\\\":\\\"index.3e9ba42a.css\\\",\\\"6GlBA\\\":\\\"index.c7c7a8b8.js\\\",\\\"aeMeN\\\":\\\"one.4026c946.js\\\",\\\"8KnAb\\\":\\\"one.38d1601d.js\\\"}\"));","/// Zappar for ThreeJS Examples\n/// Face Tracking 3D Model\n\n// In this example we track a 3D model to the user's face\n\nimport * as THREE from 'three';\nimport * as ZapparThree from '@zappar/zappar-threejs';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport ZapparSharing from '@zappar/sharing';\nimport * as ZapparVideoRecorder from '@zappar/video-recorder';\n\nimport './index.css';\n\n// The SDK is supported on many different browsers, but there are some that\n// don't provide camera access. This function detects if the browser is supported\n// For more information on support, check out the readme over at\n// https://www.npmjs.com/package/@zappar/zappar-threejs\nif (ZapparThree.browserIncompatible()) {\n  // The browserIncompatibleUI() function shows a full-page dialog that informs the user\n  // they're using an unsupported browser, and provides a button to 'copy' the current page\n  // URL so they can 'paste' it into the address bar of a compatible alternative.\n  ZapparThree.browserIncompatibleUI();\n\n  // If the browser is not compatible, we can avoid setting up the rest of the page\n  // so we throw an exception here.\n  throw new Error('Unsupported browser');\n}\n\n// ZapparThree provides a LoadingManager that shows a progress bar while\n// the assets are downloaded. You can use this if it's helpful, or use\n// your own loading UI - it's up to you :-)\nconst manager = new ZapparThree.LoadingManager();\n\n// Construct our ThreeJS renderer (using preserveDrawingBuffer for the snapshot) and scene as usual\nconst renderer = new THREE.WebGLRenderer({ antialias: true, preserveDrawingBuffer: true });\nconst scene = new THREE.Scene();\ndocument.body.appendChild(renderer.domElement);\n\n// As with a normal ThreeJS scene, resize the canvas if the window resizes\nrenderer.setSize(window.innerWidth, window.innerHeight);\nwindow.addEventListener('resize', () => {\n  renderer.setSize(window.innerWidth, window.innerHeight);\n});\n\n// Create a Zappar camera that we'll use instead of a ThreeJS camera\nconst camera = new ZapparThree.Camera();\n\n// In order to use camera and motion data, we need to ask the users for permission\n// The Zappar library comes with some UI to help with that, so let's use it\nZapparThree.permissionRequestUI().then((granted) => {\n  // If the user granted us the permissions we need then we can start the camera\n  // Otherwise let's them know that it's necessary with Zappar's permission denied UI\n  if (granted) camera.start(true); // true parameter for user facing camera\n  else ZapparThree.permissionDeniedUI();\n});\n\n// The Zappar component needs to know our WebGL context, so set it like this:\nZapparThree.glContextSet(renderer.getContext());\n\n// Set the background of our scene to be the camera background texture\n// that's provided by the Zappar camera\nscene.background = camera.backgroundTexture;\n\n// Create a FaceTracker and a FaceAnchorGroup from it to put Three content in\n// Pass our loading manager to the loader to ensure that the progress bar\n// works correctly\nconst faceTracker = new ZapparThree.FaceTrackerLoader(manager).load();\nconst faceTrackerGroup = new ZapparThree.FaceAnchorGroup(camera, faceTracker);\n// Add our face tracker group into the ThreeJS scene\nscene.add(faceTrackerGroup);\n\n// Start with the content group invisible\nfaceTrackerGroup.visible = false;\n\n// We want the user's face to appear in the center of the helmet\n// so use ZapparThree.HeadMaskMesh to mask out the back of the helmet.\n// In addition to constructing here we'll call mask.updateFromFaceAnchorGroup(...)\n// in the frame loop later.\nconst mask = new ZapparThree.HeadMaskMeshLoader().load();\nfaceTrackerGroup.add(mask);\n\n// Load a 3D model to place within our group (using ThreeJS's GLTF loader)\n// Pass our loading manager in to ensure the progress bar works correctly\nconst helmetSrc = new URL('../assets/astronaut_helmet.glb', import.meta.url).href;\nconst gltfLoader = new GLTFLoader(manager);\ngltfLoader.load(helmetSrc, (gltf) => {\n  // Position the loaded content to overlay user's face\n\n  // 4. FULL HEAD COVER (ASTRONAUT HELMET)\n  gltf.scene.position.set(0, -1, -0.35);\n  gltf.scene.scale.set(0.06, 0.06, 0.1);\n\n  console.log(gltf.scene)\n  // Add the scene to the tracker group\n  faceTrackerGroup.add(gltf.scene);\n}, undefined, () => {\n  console.log('An error ocurred loading the GLTF model');\n});\n\n// Let's add some lighting, first a directional light above the model pointing down\nconst directionalLight = new THREE.DirectionalLight('white', 0.8);\ndirectionalLight.position.set(0, 5, 0);\ndirectionalLight.lookAt(0, 0, 0);\nscene.add(directionalLight);\n\n// And then a little ambient light to brighten the model up a bit\nconst ambientLight = new THREE.AmbientLight('white', 0.4);\nscene.add(ambientLight);\n\n// Hide the 3D content when the face is out of view\nfaceTrackerGroup.faceTracker.onVisible.bind(() => { faceTrackerGroup.visible = true; });\nfaceTrackerGroup.faceTracker.onNotVisible.bind(() => { faceTrackerGroup.visible = false; });\n\n// Get a reference to the 'Snapshot' button so we can attach a 'click' listener\nconst snapButton = document.getElementById('snapshot') || document.createElement('div');\n\nsnapButton.addEventListener('click', () => {\n  // Get canvas from dom\n  const canvas = document.querySelector('canvas') || document.createElement('canvas');\n\n  // Convert canvas data to url\n  const url = canvas.toDataURL('image/jpeg', 0.8);\n\n  // Take snapshot\n  ZapparSharing({\n    data: url,\n  });\n});\n\n// video capture\nconst vidButton = document.getElementById('videocapture') || document.createElement('div');\nconst stopButton = document.getElementById('stopcapture') || document.createElement('div');\n\nconst canvas = document.querySelector('canvas') || document.createElement('canvas');\n\nZapparVideoRecorder.createCanvasVideoRecorder(canvas, {\n}).then((recorder) => {\n  vidButton.addEventListener('click', () => {\n    recorder.start();\n  });\n\n  stopButton.addEventListener('click', () => {\n    recorder.stop();\n  });\n\n  recorder.onComplete.bind(async (res) => {\n    ZapparSharing({\n      data: await res.asDataURL(),\n    });\n  });\n});\n\n// Use a function to render our scene as usual\nfunction render(): void {\n  // The Zappar camera must have updateFrame called every frame\n  camera.updateFrame(renderer);\n\n  // Update the head mask so it fits the user's head in this frame\n  mask.updateFromFaceAnchorGroup(faceTrackerGroup);\n\n  // Draw the ThreeJS scene in the usual way, but using the Zappar camera\n  renderer.render(scene, camera);\n\n  // Call render() again next frame\n  requestAnimationFrame(render);\n}\n\n// Start things off\nrender();\n","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"ljGNR\")).toString();"],"names":["$18c11f3350a906ea$export$6503ec6e8aabbaf","$18c11f3350a906ea$export$f7ad0328861e2f03","$18c11f3350a906ea$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","parcelRequire","register","JSON","parse","$ilwiq","$2dyhB","browserIncompatible","browserIncompatibleUI","$02037d13ab2153cd$var$manager","LoadingManager","$02037d13ab2153cd$var$renderer","WebGLRenderer","antialias","preserveDrawingBuffer","$02037d13ab2153cd$var$scene","Scene","document","body","appendChild","domElement","setSize","window","innerWidth","innerHeight","addEventListener","$02037d13ab2153cd$var$camera","Camera","permissionRequestUI","then","granted","start","permissionDeniedUI","glContextSet","getContext","background","backgroundTexture","$02037d13ab2153cd$var$faceTracker","FaceTrackerLoader","load","$02037d13ab2153cd$var$faceTrackerGroup","FaceAnchorGroup","add","visible","$02037d13ab2153cd$var$mask","HeadMaskMeshLoader","$4274e75609395967$exports","URL","resolve","import","meta","url","toString","$02037d13ab2153cd$var$helmetSrc","href","$7lx9d","GLTFLoader","gltf","scene","position","set","scale","console","log","undefined","$02037d13ab2153cd$var$directionalLight","DirectionalLight","lookAt","$02037d13ab2153cd$var$ambientLight","AmbientLight","faceTracker","onVisible","bind","onNotVisible","getElementById","createElement","querySelector","toDataURL","$parcel$interopDefault","$fuYhq","data","$02037d13ab2153cd$var$vidButton","$02037d13ab2153cd$var$stopButton","$02037d13ab2153cd$var$canvas","$dlmvV","createCanvasVideoRecorder","recorder","stop","onComplete","async","res","asDataURL","$02037d13ab2153cd$var$render","updateFrame","updateFromFaceAnchorGroup","render","requestAnimationFrame"],"version":3,"file":"four.9729eb52.js.map"}