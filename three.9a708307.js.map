{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/runtime-24519551fec74943.js","src/three.ts","node_modules/@parcel/runtime-js/lib/runtime-99c6d2456bf5c9a6.js"],"sourcesContent":["require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"lWepB\\\":\\\"three.9a708307.js\\\",\\\"1YdiR\\\":\\\"worker.7eb94a02.js\\\",\\\"e0xw1\\\":\\\"zappar-cv.315eebda.wasm\\\",\\\"eYcMP\\\":\\\"face_mesh_face_model.9f3b859a.zbin\\\",\\\"e6ghN\\\":\\\"face_mesh_full_head_simplified_model.caf9de0a.zbin\\\",\\\"ih7P4\\\":\\\"face_tracking_model.624095d1.zbin\\\",\\\"9gvkQ\\\":\\\"videorecorder.fd59f5ae.wasm\\\",\\\"b1Asn\\\":\\\"recorder-worker.e7190aa3.js\\\",\\\"j0yp2\\\":\\\"cheek_paint.7fb61bca.png\\\",\\\"hp2O3\\\":\\\"index.3e9ba42a.css\\\",\\\"6GlBA\\\":\\\"index.c7c7a8b8.js\\\",\\\"8KnAb\\\":\\\"one.38d1601d.js\\\"}\"));","/// Zappar for ThreeJS Examples\n/// Face Tracking Face Mesh\n\n// In this example we apply a face-fitting textured mesh\n// to the user's face\n\nimport * as ZapparThree from '@zappar/zappar-threejs';\nimport * as THREE from 'three';\nimport './index.css';\nimport ZapparSharing from '@zappar/sharing';\nimport * as ZapparVideoRecorder from '@zappar/video-recorder';\n\nconst faceTextureTemplate = new URL('../assets/cheek_paint.png', import.meta.url).href;\n\n// The SDK is supported on many different browsers, but there are some that\n// don't provide camera access. This function detects if the browser is supported\n// For more information on support, check out the readme over at\n// https://www.npmjs.com/package/@zappar/zappar-threejs\nif (ZapparThree.browserIncompatible()) {\n  // The browserIncompatibleUI() function shows a full-page dialog that informs the user\n  // they're using an unsupported browser, and provides a button to 'copy' the current page\n  // URL so they can 'paste' it into the address bar of a compatible alternative.\n  ZapparThree.browserIncompatibleUI();\n\n  // If the browser is not compatible, we can avoid setting up the rest of the page\n  // so we throw an exception here.\n  throw new Error('Unsupported browser');\n}\n\n// ZapparThree provides a LoadingManager that shows a progress bar while\n// the assets are downloaded. You can use this if it's helpful, or use\n// your own loading UI - it's up to you :-)\nconst manager = new ZapparThree.LoadingManager();\n\n// Construct our ThreeJS renderer and scene as usual\nconst renderer = new THREE.WebGLRenderer({ antialias: true });\nconst scene = new THREE.Scene();\ndocument.body.appendChild(renderer.domElement);\n\n// As with a normal ThreeJS scene, resize the canvas if the window resizes\nrenderer.setSize(window.innerWidth, window.innerHeight);\nwindow.addEventListener('resize', () => {\n  renderer.setSize(window.innerWidth, window.innerHeight);\n});\n\n// Create a Zappar camera that we'll use instead of a ThreeJS camera\nconst camera = new ZapparThree.Camera();\n\n// In order to use camera and motion data, we need to ask the users for permission\n// The Zappar library comes with some UI to help with that, so let's use it\nZapparThree.permissionRequestUI().then((granted) => {\n  // If the user granted us the permissions we need then we can start the camera\n  // Otherwise let's them know that it's necessary with Zappar's permission denied UI\n  if (granted) camera.start(true); // true parameter for user facing camera\n  else ZapparThree.permissionDeniedUI();\n});\n\n// The Zappar component needs to know our WebGL context, so set it like this:\nZapparThree.glContextSet(renderer.getContext());\n\n// Set the background of our scene to be the camera background texture\n// that's provided by the Zappar camera\nscene.background = camera.backgroundTexture;\n\n// Create a FaceTracker and a FaceAnchorGroup from it to put our Three content in\n// Pass our loading manager in to ensure the progress bar works correctly\nconst faceTracker = new ZapparThree.FaceTrackerLoader(manager).load();\nconst faceTrackerGroup = new ZapparThree.FaceAnchorGroup(camera, faceTracker);\n\n// Add our face tracker group into the ThreeJS scene\nscene.add(faceTrackerGroup);\n\n// Load the face mesh and create a THREE BufferGeometry from it\n// Pass our loading manager in to ensure the progress bar works correctly\nconst faceMesh = new ZapparThree.FaceMeshLoader(manager).load();\nconst faceBufferGeometry = new ZapparThree.FaceBufferGeometry(faceMesh);\n\n// Load the face template texture to render on the mesh\n// Pass our loading manager in to ensure the progress bar works correctly\nconst textureLoader = new THREE.TextureLoader(manager);\nconst faceTexture = textureLoader.load(faceTextureTemplate);\n\nfaceTexture.flipY = false;\n\n// Construct a THREE Mesh object from our geometry and texture, and add it to our tracker group\nconst faceMeshMesh = new THREE.Mesh(faceBufferGeometry, new THREE.MeshStandardMaterial({\n  map: faceTexture, transparent: true,\n}));\nfaceTrackerGroup.add(faceMeshMesh);\n\n// Let's add some lighting, first a directional light above the model pointing down\nconst directionalLight = new THREE.DirectionalLight('white', 0.8);\ndirectionalLight.position.set(0, 5, 0);\ndirectionalLight.lookAt(0, 0, 0);\nscene.add(directionalLight);\n\n// And then a little ambient light to brighten the model up a bit\nconst ambeintLight = new THREE.AmbientLight('white', 0.4);\nscene.add(ambeintLight);\n\n// Hide the 3D content when the face goes out of view\nfaceTrackerGroup.faceTracker.onVisible.bind(() => { faceTrackerGroup.visible = true; });\nfaceTrackerGroup.faceTracker.onNotVisible.bind(() => { faceTrackerGroup.visible = false; });\n\n// snapshot\nconst snapButton = document.getElementById('snapshot') || document.createElement('div');\n\nsnapButton.addEventListener(\"click\", () => {\n\n  // Create an image from the canvas\n  const planeGeometry = new THREE.PlaneGeometry(2, 2);\n  const planeMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff });\n  const planeMesh = new THREE.Mesh(planeGeometry, planeMaterial);\n  scene.add(planeMesh);\n\n  // Temporarily set the camera to focus on the planeMesh\n  const originalCameraPosition = camera.position.clone();\n  camera.position.set(\n    planeMesh.position.x,\n    planeMesh.position.y,\n    planeMesh.position.z + 5\n  );\n\n  camera.lookAt(planeMesh.position);\n\n  // Render the scene\n  renderer.render(scene, camera);\n\n  // Capture the rendered image from the main renderer\n  // const screenshotImage = new Image();\n  const dataURL = renderer.domElement.toDataURL(\"image/png\");\n\n    // Take snapshot\n  ZapparSharing({\n    data: dataURL,\n  });\n\n  // Reset the camera and visibility of the planeMesh\n  camera.position.copy(originalCameraPosition);\n  camera.lookAt(0, 0, 0);\n});\n\n// video capture\nconst vidButton = document.getElementById('videocapture') || document.createElement('div');\nconst stopButton = document.getElementById('stopcapture') || document.createElement('div');\n\nconst canvas = document.querySelector('canvas') || document.createElement('canvas');\n\nZapparVideoRecorder.createCanvasVideoRecorder(canvas, {\n}).then((recorder) => {\n  vidButton.addEventListener('click', () => {\n    recorder.start();\n  });\n\n  stopButton.addEventListener('click', () => {\n    recorder.stop();\n  });\n\n  recorder.onComplete.bind(async (res) => {\n    ZapparSharing({\n      data: await res.asDataURL(),\n    });\n  });\n});\n\n// Use a function to render our scene as usual\nfunction render(): void {\n  // The Zappar camera must have updateFrame called every frame\n  camera.updateFrame(renderer);\n\n  // Each frame, after camera.updateFrame we want to update the mesh geometry\n  // with the latest data from the face tracker\n  faceBufferGeometry.updateFromFaceAnchorGroup(faceTrackerGroup);\n\n  // Draw the ThreeJS scene in the usual way, but using the Zappar camera\n  renderer.render(scene, camera);\n\n  // Call render() again next frame\n  requestAnimationFrame(render);\n}\n\n// Start things off\nrender();\n","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"j0yp2\")).toString();"],"names":["parcelRequire","register","JSON","parse","$2dyhB","$9f65b5ef3a39455b$exports","URL","resolve","import","meta","url","toString","$cf5d454c121f554b$var$faceTextureTemplate","href","browserIncompatible","browserIncompatibleUI","Error","$cf5d454c121f554b$var$manager","LoadingManager","$cf5d454c121f554b$var$renderer","$ilwiq","WebGLRenderer","antialias","$cf5d454c121f554b$var$scene","Scene","document","body","appendChild","domElement","setSize","window","innerWidth","innerHeight","addEventListener","$cf5d454c121f554b$var$camera","Camera","permissionRequestUI","then","granted","start","permissionDeniedUI","glContextSet","getContext","background","backgroundTexture","$cf5d454c121f554b$var$faceTracker","FaceTrackerLoader","load","$cf5d454c121f554b$var$faceTrackerGroup","FaceAnchorGroup","add","$cf5d454c121f554b$var$faceMesh","FaceMeshLoader","$cf5d454c121f554b$var$faceBufferGeometry","FaceBufferGeometry","$cf5d454c121f554b$var$faceTexture","TextureLoader","flipY","$cf5d454c121f554b$var$faceMeshMesh","Mesh","MeshStandardMaterial","map","transparent","$cf5d454c121f554b$var$directionalLight","DirectionalLight","position","set","lookAt","$cf5d454c121f554b$var$ambeintLight","AmbientLight","faceTracker","onVisible","bind","visible","onNotVisible","getElementById","createElement","planeGeometry","PlaneGeometry","planeMaterial","MeshBasicMaterial","color","planeMesh","originalCameraPosition","clone","x","y","z","render","dataURL","toDataURL","$parcel$interopDefault","$fuYhq","data","copy","$cf5d454c121f554b$var$vidButton","$cf5d454c121f554b$var$stopButton","$cf5d454c121f554b$var$canvas","querySelector","$dlmvV","createCanvasVideoRecorder","recorder","stop","onComplete","async","res","asDataURL","$cf5d454c121f554b$var$render","updateFrame","updateFromFaceAnchorGroup","requestAnimationFrame"],"version":3,"file":"three.9a708307.js.map"}